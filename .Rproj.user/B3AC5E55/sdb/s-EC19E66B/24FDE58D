{
    "contents" : "#' Function to convert a table of XY coordinates to spatial lines\n#' @export\n#' @import sp maptools\n\npoints_to_line <- function(data, long, lat, id_field = NULL, sort_field = NULL) {\n\n  # Convert to SpatialPointsDataFrame\n  coordinates(data) <- c(long, lat)\n\n  # If there is a sort field...\n  if (!is.null(sort_field)) {\n    if (!is.null(id_field)) {\n      data <- data[order(data[[id_field]], data[[sort_field]]), ]\n    } else {\n      data <- data[order(data[[sort_field]]), ]\n    }\n  }\n\n  # If there is only one path...\n  if (is.null(id_field)) {\n\n    lines <- SpatialLines(list(Lines(list(Line(data)), \"id\")))\n\n    return(lines)\n\n    # Now, if we have multiple lines...\n  } else if (!is.null(id_field)) {\n\n    # Split into a list by ID field\n    paths <- sp::split(data, data[[id_field]])\n\n    sp_lines <- SpatialLines(list(Lines(list(Line(paths[[1]])), \"line1\")))\n\n    # I like for loops, what can I say...\n    for (p in 2:length(paths)) {\n      id <- paste0(\"line\", as.character(p))\n      l <- SpatialLines(list(Lines(list(Line(paths[[p]])), id)))\n      sp_lines <- spRbind(sp_lines, l)\n    }\n\n    return(sp_lines)\n  }\n}\n",
    "created" : 1427806627002.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3351296699",
    "id" : "24FDE58D",
    "lastKnownWriteTime" : 1427807995,
    "path" : "~/GitHub/kwgeo/R/points_to_line.R",
    "project_path" : "R/points_to_line.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}